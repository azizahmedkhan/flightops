services:
  db:
    image: pgvector/pgvector:pg16
    
    environment:
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASS:-postgres}
      - POSTGRES_DB=${DB_NAME:-flightops}
    ports: ["5432:5432"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d flightops"]
      interval: 5s
      timeout: 5s
      retries: 10
    volumes:
      - dbdata:/var/lib/postgresql/data

  redis:
    image: redis:7-alpine
    ports: ["6379:6379"]

  knowledge-engine:
    build:
      context: ..
      dockerfile: services/knowledge-engine/Dockerfile
    
    env_file:
      - ../.env
    environment:
      - CHAT_MODEL=${CHAT_MODEL}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - EMBEDDINGS_MODEL=${EMBEDDINGS_MODEL}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
    depends_on:
      db:
        condition: service_healthy
    ports: ["8081:8081"]

  comms-svc:
    build:
      context: ..
      dockerfile: services/comms-svc/Dockerfile
    env_file:
      - ../.env
    environment:
      - CHAT_MODEL=${CHAT_MODEL:-gpt-4o-mini}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    ports: ["8083:8083"]

  agent-svc:
    build:
      context: ..
      dockerfile: services/agent-svc/Dockerfile
    env_file:
      - ../.env
    environment:
      - CHAT_MODEL=${CHAT_MODEL:-gpt-4o-mini}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - KNOWLEDGE_SERVICE_URL=http://knowledge-engine:8081
      - COMMS_URL=http://comms-svc:8083
      - CHAT_MODEL=${CHAT_MODEL:-gpt-4o-mini}
      - ALLOW_UNGROUNDED_ANSWERS=${ALLOW_UNGROUNDED_ANSWERS:-true}
    depends_on:
      knowledge-engine:
        condition: service_started
      comms-svc:
        condition: service_started
    ports: ["8082:8082"]

  ingest-svc:
    build:
      context: ..
      dockerfile: services/ingest-svc/Dockerfile
    env_file:
      - ../.env
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - CHAT_MODEL=${CHAT_MODEL:-gpt-4o-mini}
      - EMBEDDINGS_MODEL=${EMBEDDINGS_MODEL:-text-embedding-3-small}
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-flightops}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASS=${DB_PASS:-postgres}
    depends_on:
      db:
        condition: service_healthy
    ports: ["8084:8084"]

  customer-chat-svc:
    build:
      context: ..
      dockerfile: services/customer-chat-svc/Dockerfile
    
    environment:
      - COMMS_URL=http://comms-svc:8083
      - AGENT_URL=http://agent-svc:8082
      - KNOWLEDGE_SERVICE_URL=http://knowledge-engine:8081
    depends_on:
      agent-svc:
        condition: service_started
      comms-svc:
        condition: service_started
      knowledge-engine:
        condition: service_started
    ports: ["8087:8087"]

  predictive-svc:
    build:
      context: ..
      dockerfile: services/predictive-svc/Dockerfile
    env_file:
      - ../.env
    environment:
      - CHAT_MODEL=${CHAT_MODEL}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-flightops}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASS=${DB_PASS:-postgres}
    depends_on:
      db:
        condition: service_healthy
    ports: ["8085:8085"]

  crew-svc:
    build:
      context: ..
      dockerfile: services/crew-svc/Dockerfile
    
    env_file:
      - ../.env
    environment:
      - CHAT_MODEL=${CHAT_MODEL:-gpt-4o-mini}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-flightops}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASS=${DB_PASS:-postgres}
    depends_on:
      db:
        condition: service_healthy
    ports: ["8086:8086"]

  scalable-chatbot-svc:
    build:
      context: ..
      dockerfile: services/scalable-chatbot-svc/Dockerfile
    
    env_file:
      - ../.env
    environment:
      - CHAT_MODEL=${CHAT_MODEL:-gpt-4o-mini}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - REDIS_URL=redis://redis:6379
      - CHAT_MODEL=${CHAT_MODEL:-gpt-4o-mini}
      - KNOWLEDGE_SERVICE_URL=http://knowledge-engine:8081
      - AGENT_SVC_URL=http://agent-svc:8081
      - DB_ROUTER_URL=http://db-router-svc:8000
      - DEBUGPY=true
    depends_on:
      redis:
        condition: service_started
      knowledge-engine:
        condition: service_started
      agent-svc:
        condition: service_started
      comms-svc:
        condition: service_started
      db-router-svc:
        condition: service_started
    ports: ["8088:8088", "5678:5678"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8088/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  db-router-svc:
    build:
      context: ..
      dockerfile: services/db-router-svc/Dockerfile
    
    env_file:
      - ../.env
    environment:
      - CHAT_MODEL=${CHAT_MODEL:-gpt-4o-mini}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - DATABASE_URL=postgresql://${DB_USER:-postgres}:${DB_PASS:-postgres}@db:5432/${DB_NAME:-flightops}
    depends_on:
      db:
        condition: service_healthy
    ports: ["8089:8000"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  gateway-api:
    build:
      context: ..
      dockerfile: services/gateway-api/Dockerfile
    
    environment:
      - AGENT_URL=http://agent-svc:8082
      - KNOWLEDGE_SERVICE_URL=http://knowledge-engine:8081
      - COMMS_URL=http://comms-svc:8083
      - INGEST_URL=http://ingest-svc:8084
      - CUSTOMER_CHAT_URL=http://customer-chat-svc:8087
      - PREDICTIVE_URL=http://predictive-svc:8085
      - CREW_URL=http://crew-svc:8086
      - DB_ROUTER_URL=http://db-router-svc:8000
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-flightops}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASS=${DB_PASS:-postgres}
      - EMBEDDINGS_MODEL=${EMBEDDINGS_MODEL:-text-embedding-3-small}
    depends_on:
      agent-svc:
        condition: service_started
      knowledge-engine:
        condition: service_started
      comms-svc:
        condition: service_started
      ingest-svc:
        condition: service_started
      customer-chat-svc:
        condition: service_started
      predictive-svc:
        condition: service_started
      crew-svc:
        condition: service_started
      db-router-svc:
        condition: service_started
    ports: ["8080:8080"]

  web:
    build:
      context: ..
      dockerfile: ui/web/Dockerfile
    
    environment:
      - NEXT_PUBLIC_GATEWAY_URL=http://localhost:8080
    depends_on:
      gateway-api:
        condition: service_started
    ports: ["3000:3000"]

  stack-ready:
    image: alpine:3.19
    depends_on:
      web:
        condition: service_started
      gateway-api:
        condition: service_started
    command: ["/bin/sh", "-c", "echo 'FlightOps stack is ready â€” visit http://localhost:3000'" ]
    restart: "no"

volumes:
  dbdata:
